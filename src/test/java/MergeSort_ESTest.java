/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 13 15:18:12 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MergeSort_ESTest extends MergeSort_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 5);
      Integer integer0 = new Integer(0);
      comparableArray0[0] = (Comparable<Integer>) integer0;
      comparableArray0[1] = (Comparable<Integer>) integer0;
      comparableArray0[2] = (Comparable<Integer>) integer0;
      Integer integer1 = Integer.decode("7");
      comparableArray0[3] = (Comparable<Integer>) integer1;
      comparableArray0[4] = (Comparable<Integer>) integer1;
      MergeSort.sort(comparableArray0);
      assertEquals(5, comparableArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 5);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1069);
      comparableArray0[0] = (Comparable<Integer>) integer0;
      comparableArray0[1] = (Comparable<Integer>) integer0;
      comparableArray0[2] = (Comparable<Integer>) integer0;
      comparableArray0[3] = (Comparable<Integer>) integer1;
      comparableArray0[4] = (Comparable<Integer>) integer0;
      MergeSort.sort(comparableArray0);
      assertEquals(5, comparableArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 5);
      Integer integer0 = new Integer(0);
      comparableArray0[0] = (Comparable<Integer>) integer0;
      comparableArray0[1] = (Comparable<Integer>) integer0;
      comparableArray0[2] = (Comparable<Integer>) integer0;
      comparableArray0[3] = (Comparable<Integer>) integer0;
      comparableArray0[4] = (Comparable<Integer>) integer0;
      MergeSort.sort(comparableArray0);
      assertEquals(5, comparableArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 5);
      Integer integer0 = new Integer(0);
      comparableArray0[0] = (Comparable<Integer>) integer0;
      comparableArray0[1] = (Comparable<Integer>) integer0;
      comparableArray0[2] = (Comparable<Integer>) integer0;
      // Undeclared exception!
      try { 
        MergeSort.sort(comparableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MergeSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      MergeSort.sort(comparableArray0);
      assertEquals(0, comparableArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MergeSort mergeSort0 = new MergeSort();
  }
}
