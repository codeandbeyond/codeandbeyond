/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 13 15:17:00 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MaxPQ_ESTest extends MaxPQ_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MaxPQ<String> maxPQ0 = new MaxPQ<String>((Comparator<String>) null);
      assertNotNull(maxPQ0);
      assertEquals(0, maxPQ0.size());
      assertTrue(maxPQ0.isEmpty());
      
      MaxPQ<MaxPQ<String>> maxPQ1 = new MaxPQ<MaxPQ<String>>();
      assertNotNull(maxPQ1);
      assertTrue(maxPQ1.isEmpty());
      assertEquals(0, maxPQ1.size());
      
      maxPQ1.insert(maxPQ0);
      assertEquals(0, maxPQ0.size());
      assertTrue(maxPQ0.isEmpty());
      assertEquals(1, maxPQ1.size());
      assertFalse(maxPQ1.isEmpty());
      
      int int0 = maxPQ1.size();
      assertEquals(1, int0);
      assertEquals(1, maxPQ1.size());
      assertFalse(maxPQ1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MaxPQ<Object> maxPQ0 = new MaxPQ<Object>(0);
      assertNotNull(maxPQ0);
      assertEquals(0, maxPQ0.size());
      assertTrue(maxPQ0.isEmpty());
      
      maxPQ0.insert((Object) null);
      assertFalse(maxPQ0.isEmpty());
      assertEquals(1, maxPQ0.size());
      
      Object object0 = maxPQ0.max();
      assertNull(object0);
      assertFalse(maxPQ0.isEmpty());
      assertEquals(1, maxPQ0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<MaxPQ<Object>> comparator0 = (Comparator<MaxPQ<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MaxPQ<MaxPQ<Object>> maxPQ0 = new MaxPQ<MaxPQ<Object>>(comparator0);
      assertNotNull(maxPQ0);
      assertTrue(maxPQ0.isEmpty());
      assertEquals(0, maxPQ0.size());
      
      Iterator<MaxPQ<Object>> iterator0 = maxPQ0.iterator();
      assertNotNull(iterator0);
      assertTrue(maxPQ0.isEmpty());
      assertEquals(0, maxPQ0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MaxPQ<String> maxPQ0 = new MaxPQ<String>();
      assertNotNull(maxPQ0);
      assertTrue(maxPQ0.isEmpty());
      assertEquals(0, maxPQ0.size());
      
      maxPQ0.insert((String) null);
      assertEquals(1, maxPQ0.size());
      assertFalse(maxPQ0.isEmpty());
      
      String string0 = maxPQ0.delMax();
      assertNull(string0);
      assertTrue(maxPQ0.isEmpty());
      assertEquals(0, maxPQ0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MaxPQ<Object> maxPQ0 = new MaxPQ<Object>(objectArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(maxPQ0);
      assertEquals(1, maxPQ0.size());
      assertFalse(maxPQ0.isEmpty());
      
      // Undeclared exception!
      try { 
        maxPQ0.insert((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MaxPQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MaxPQ<Object> maxPQ0 = new MaxPQ<Object>(82);
      assertNotNull(maxPQ0);
      assertEquals(0, maxPQ0.size());
      assertTrue(maxPQ0.isEmpty());
      
      maxPQ0.insert(maxPQ0);
      assertEquals(1, maxPQ0.size());
      assertFalse(maxPQ0.isEmpty());
      
      // Undeclared exception!
      try { 
        maxPQ0.insert(maxPQ0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // MaxPQ cannot be cast to java.lang.Comparable
         //
         verifyException("MaxPQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MaxPQ<String> maxPQ0 = new MaxPQ<String>((-1), comparator0);
      assertNotNull(maxPQ0);
      assertEquals(0, maxPQ0.size());
      assertTrue(maxPQ0.isEmpty());
      
      // Undeclared exception!
      try { 
        maxPQ0.insert("IBGbz(TDEb>[h<");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("MaxPQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MaxPQ<Object>[] maxPQArray0 = (MaxPQ<Object>[]) Array.newInstance(MaxPQ.class, 9);
      MaxPQ<Object> maxPQ0 = new MaxPQ<Object>(0, (Comparator<Object>) null);
      assertNotNull(maxPQ0);
      assertTrue(maxPQ0.isEmpty());
      assertEquals(0, maxPQ0.size());
      
      maxPQArray0[3] = maxPQ0;
      maxPQArray0[7] = maxPQArray0[3];
      MaxPQ<MaxPQ<Object>> maxPQ1 = null;
      try {
        maxPQ1 = new MaxPQ<MaxPQ<Object>>(maxPQArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // MaxPQ cannot be cast to java.lang.Comparable
         //
         verifyException("MaxPQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MaxPQ<String> maxPQ0 = null;
      try {
        maxPQ0 = new MaxPQ<String>((-3515));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MaxPQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integerArray0[0];
      MaxPQ<Integer> maxPQ0 = new MaxPQ<Integer>(integerArray0);
      assertEquals(3, integerArray0.length);
      assertNotNull(maxPQ0);
      assertEquals(3, maxPQ0.size());
      assertFalse(maxPQ0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      MaxPQ<Integer> maxPQ0 = new MaxPQ<Integer>(integerArray0);
      assertEquals(3, integerArray0.length);
      assertNotNull(maxPQ0);
      assertFalse(maxPQ0.isEmpty());
      assertEquals(3, maxPQ0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(2508);
      assertEquals(2508, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integerArray0[1];
      integerArray0[4] = integerArray0[1];
      integerArray0[5] = integerArray0[0];
      MaxPQ<Integer> maxPQ0 = new MaxPQ<Integer>(integerArray0);
      assertEquals(6, integerArray0.length);
      assertNotNull(maxPQ0);
      assertEquals(6, maxPQ0.size());
      assertFalse(maxPQ0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      MaxPQ<Integer> maxPQ0 = null;
      try {
        maxPQ0 = new MaxPQ<Integer>(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MaxPQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      MaxPQ<String> maxPQ0 = new MaxPQ<String>(42, comparator0);
      assertNotNull(maxPQ0);
      assertEquals(0, maxPQ0.size());
      assertTrue(maxPQ0.isEmpty());
      
      maxPQ0.insert("{k&we@J:p~ovuIR_");
      assertFalse(maxPQ0.isEmpty());
      assertEquals(1, maxPQ0.size());
      
      maxPQ0.insert("~L )Si3!qN%@H");
      assertFalse(maxPQ0.isEmpty());
      assertEquals(2, maxPQ0.size());
      
      String string0 = maxPQ0.delMax();
      assertEquals("{k&we@J:p~ovuIR_", string0);
      assertNotNull(string0);
      assertFalse(maxPQ0.isEmpty());
      assertEquals(1, maxPQ0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MaxPQ<String> maxPQ0 = new MaxPQ<String>(0);
      assertNotNull(maxPQ0);
      assertEquals(0, maxPQ0.size());
      assertTrue(maxPQ0.isEmpty());
      
      boolean boolean0 = maxPQ0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, maxPQ0.size());
      assertTrue(maxPQ0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MaxPQ<Integer> maxPQ0 = new MaxPQ<Integer>();
      assertNotNull(maxPQ0);
      assertEquals(0, maxPQ0.size());
      assertTrue(maxPQ0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      maxPQ0.insert(integer0);
      assertFalse(maxPQ0.isEmpty());
      assertEquals(1, maxPQ0.size());
      
      boolean boolean0 = maxPQ0.isEmpty();
      assertFalse(boolean0);
      assertFalse(maxPQ0.isEmpty());
      assertEquals(1, maxPQ0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MaxPQ<MaxPQ<String>> maxPQ0 = new MaxPQ<MaxPQ<String>>();
      assertNotNull(maxPQ0);
      assertEquals(0, maxPQ0.size());
      assertTrue(maxPQ0.isEmpty());
      
      int int0 = maxPQ0.size();
      assertEquals(0, int0);
      assertEquals(0, maxPQ0.size());
      assertTrue(maxPQ0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(22, 22, 22, 22, (-1240)).when(comparator0).compare(anyString() , anyString());
      MaxPQ<String> maxPQ0 = new MaxPQ<String>(comparator0);
      assertNotNull(maxPQ0);
      assertTrue(maxPQ0.isEmpty());
      assertEquals(0, maxPQ0.size());
      
      maxPQ0.insert("");
      assertEquals(1, maxPQ0.size());
      assertFalse(maxPQ0.isEmpty());
      
      maxPQ0.insert("");
      assertEquals(2, maxPQ0.size());
      assertFalse(maxPQ0.isEmpty());
      
      // Undeclared exception!
      try { 
        maxPQ0.insert("");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "B";
      stringArray0[1] = "";
      stringArray0[2] = "B";
      MaxPQ<String> maxPQ0 = new MaxPQ<String>(stringArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      maxPQ0.forEach(consumer0);
      assertEquals(3, maxPQ0.size());
      assertFalse(maxPQ0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MaxPQ<Object> maxPQ0 = new MaxPQ<Object>(0);
      // Undeclared exception!
      try { 
        maxPQ0.delMax();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Priority queue underflow
         //
         verifyException("MaxPQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(22, 22, (-1035), (-1035)).when(comparator0).compare(anyString() , anyString());
      MaxPQ<String> maxPQ0 = new MaxPQ<String>(comparator0);
      maxPQ0.insert(";m");
      maxPQ0.insert(";m");
      // Undeclared exception!
      try { 
        maxPQ0.iterator();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MaxPQ<Integer> maxPQ0 = new MaxPQ<Integer>();
      // Undeclared exception!
      try { 
        maxPQ0.max();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Priority queue underflow
         //
         verifyException("MaxPQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "B";
      stringArray0[1] = "";
      stringArray0[2] = "B";
      MaxPQ<String> maxPQ0 = new MaxPQ<String>(stringArray0);
      maxPQ0.insert("B");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      maxPQ0.forEach(consumer0);
      assertEquals(4, maxPQ0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MaxPQ<String> maxPQ0 = new MaxPQ<String>(comparator0);
      maxPQ0.insert(";m");
      String string0 = maxPQ0.max();
      assertEquals(";m", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MaxPQ<Object> maxPQ0 = null;
      try {
        maxPQ0 = new MaxPQ<Object>((-623), comparator0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MaxPQ", e);
      }
  }
}
