/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 16 15:10:48 GMT 2019
 */

package com.optum.fs.rest.service.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.optum.fs.rest.service.util.RedBlackBST;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RedBlackBST_ESTest extends RedBlackBST_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      
      redBlackBST0.put("Q", "Q");
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.height());
      
      int int0 = redBlackBST0.size("_g%AX!L5.gkQ IY|", "mt4Q>pv1^_TG,b");
      assertEquals(0, int0);
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.height());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RedBlackBST<Integer, Object> redBlackBST0 = new RedBlackBST<Integer, Object>();
      assertNotNull(redBlackBST0);
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      
      Integer integer0 = new Integer(1016);
      assertEquals(1016, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1016);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1016, (int)integer1);
      assertNotNull(integer1);
      
      redBlackBST0.put(integer0, "vyL&3Pkn4}m- o_r");
      assertTrue(integer0.equals((Object)integer1));
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.height());
      
      int int0 = redBlackBST0.size(integer1, integer0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, int0);
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.height());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RedBlackBST<Integer, Object> redBlackBST0 = new RedBlackBST<Integer, Object>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      
      Integer integer0 = new Integer(1016);
      assertEquals(1016, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(248);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(248, (int)integer1);
      assertNotNull(integer1);
      
      int int0 = redBlackBST0.size(integer1, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, int0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      
      redBlackBST0.put("", "");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.height());
      assertEquals(1, redBlackBST0.size());
      
      redBlackBST0.put("hkH]", "");
      assertEquals(1, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(2, redBlackBST0.size());
      
      int int0 = redBlackBST0.rank("sAlG~");
      assertEquals(2, int0);
      assertEquals(1, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(2, redBlackBST0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RedBlackBST<Integer, Object> redBlackBST0 = new RedBlackBST<Integer, Object>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      
      // Undeclared exception!
      try { 
        redBlackBST0.select(1260);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument to select() is invalid: 1260
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RedBlackBST<String, Integer> redBlackBST0 = new RedBlackBST<String, Integer>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      redBlackBST0.put("#]HM[`", integer0);
      assertEquals(0, redBlackBST0.height());
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      
      int int0 = redBlackBST0.size();
      assertEquals(1, int0);
      assertEquals(0, redBlackBST0.height());
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RedBlackBST<Integer, Integer> redBlackBST0 = new RedBlackBST<Integer, Integer>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      redBlackBST0.put(integer0, integer0);
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.height());
      
      Integer integer1 = redBlackBST0.get(integer0);
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.height());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      
      // Undeclared exception!
      try { 
        redBlackBST0.contains((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument to get() is null
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RedBlackBST<Integer, Object> redBlackBST0 = new RedBlackBST<Integer, Object>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      
      Integer integer0 = new Integer(1016);
      assertEquals(1016, (int)integer0);
      assertNotNull(integer0);
      
      redBlackBST0.put(integer0, "vyL&3Pkni4}m- o__r");
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.size());
      
      boolean boolean0 = redBlackBST0.contains(integer0);
      assertTrue(boolean0);
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RedBlackBST<Integer, Object> redBlackBST0 = new RedBlackBST<Integer, Object>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
      
      Integer integer0 = new Integer(1016);
      assertEquals(1016, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = redBlackBST0.contains(integer0);
      assertFalse(boolean0);
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RedBlackBST<Integer, Object> redBlackBST0 = new RedBlackBST<Integer, Object>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      
      boolean boolean0 = redBlackBST0.isEmpty();
      assertTrue(boolean0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RedBlackBST<String, Integer> redBlackBST0 = new RedBlackBST<String, Integer>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      redBlackBST0.put("", integer0);
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      
      boolean boolean0 = redBlackBST0.isEmpty();
      assertFalse(boolean0);
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1016);
      assertEquals(1016, (int)integer0);
      assertNotNull(integer0);
      
      RedBlackBST<Integer, String> redBlackBST0 = new RedBlackBST<Integer, String>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      
      // Undeclared exception!
      try { 
        redBlackBST0.size(integer0, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second argument to size() is null
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      
      // Undeclared exception!
      try { 
        redBlackBST0.size((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first argument to size() is null
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RedBlackBST<String, Integer> redBlackBST0 = new RedBlackBST<String, Integer>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
      
      int int0 = redBlackBST0.size("dG]Oti", "");
      assertEquals(0, int0);
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RedBlackBST<String, Integer> redBlackBST0 = new RedBlackBST<String, Integer>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      
      // Undeclared exception!
      try { 
        redBlackBST0.keys("o#/9s-'`! : bC;D", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second argument to keys() is null
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RedBlackBST<String, Integer> redBlackBST0 = new RedBlackBST<String, Integer>();
      assertNotNull(redBlackBST0);
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      
      // Undeclared exception!
      try { 
        redBlackBST0.keys((String) null, "8w4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first argument to keys() is null
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      
      Iterable<String> iterable0 = redBlackBST0.keys();
      assertNotNull(iterable0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      assertNotNull(redBlackBST0);
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      redBlackBST0.put("", object0);
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      
      int int0 = redBlackBST0.rank("");
      assertEquals(0, int0);
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      
      redBlackBST0.put("e!!x]TIb{CA5f", "e!!x]TIb{CA5f");
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.size());
      
      int int0 = redBlackBST0.rank("");
      assertEquals(0, int0);
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      
      // Undeclared exception!
      try { 
        redBlackBST0.rank((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument to rank() is null
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
      
      redBlackBST0.put("", ";SgLfW");
      assertEquals(0, redBlackBST0.height());
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      
      redBlackBST0.put("t,", "t,");
      assertEquals(1, redBlackBST0.height());
      assertEquals(2, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      
      String string0 = redBlackBST0.select(0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, redBlackBST0.height());
      assertEquals(2, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      
      // Undeclared exception!
      try { 
        redBlackBST0.select(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument to select() is invalid: 0
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      
      // Undeclared exception!
      try { 
        redBlackBST0.select((-1789));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument to select() is invalid: -1789
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      
      redBlackBST0.put("e!!x]TIb{CA5f", "e!!x]TIb{CA5f");
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      
      String string0 = redBlackBST0.ceiling("e!!x]TIb{CA5f");
      assertEquals("e!!x]TIb{CA5f", string0);
      assertNotNull(string0);
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RedBlackBST<Integer, Object> redBlackBST0 = new RedBlackBST<Integer, Object>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      
      Integer integer0 = new Integer(1016);
      assertEquals(1016, (int)integer0);
      assertNotNull(integer0);
      
      redBlackBST0.put(integer0, "vyL&3Pkni4}m- o__r");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      
      Integer integer1 = new Integer(1836);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1836, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = redBlackBST0.ceiling(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNull(integer2);
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      
      redBlackBST0.put("e!!x]TIb{CA5f", "e!!x]TIb{CA5f");
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      
      String string0 = redBlackBST0.ceiling("");
      assertEquals("e!!x]TIb{CA5f", string0);
      assertNotNull(string0);
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      
      // Undeclared exception!
      try { 
        redBlackBST0.ceiling((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument to ceiling() is null
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      
      // Undeclared exception!
      try { 
        redBlackBST0.ceiling("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // calls ceiling() with empty symbol table
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
      
      redBlackBST0.put("", "");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.height());
      assertEquals(2, redBlackBST0.size());
      
      redBlackBST0.put("4.c", "t)");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.height());
      assertEquals(3, redBlackBST0.size());
      
      String string0 = redBlackBST0.floor("7{JY*kse");
      assertEquals("7{JY*kse", string0);
      assertNotNull(string0);
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.height());
      assertEquals(3, redBlackBST0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      
      redBlackBST0.put("rd5:fmJk_d5l<", "t)");
      assertEquals(0, redBlackBST0.height());
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      
      String string0 = redBlackBST0.floor("7{JY*kse");
      assertNull(string0);
      assertEquals(0, redBlackBST0.height());
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      
      redBlackBST0.put("", ";SgLfW");
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.height());
      
      String string0 = redBlackBST0.floor("7{JY*kse");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.height());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RedBlackBST<String, Integer> redBlackBST0 = new RedBlackBST<String, Integer>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      
      // Undeclared exception!
      try { 
        redBlackBST0.floor((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument to floor() is null
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      
      // Undeclared exception!
      try { 
        redBlackBST0.floor("7{JY*kse");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // calls floor() with empty symbol table
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RedBlackBST<String, Integer> redBlackBST0 = new RedBlackBST<String, Integer>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      
      // Undeclared exception!
      try { 
        redBlackBST0.min();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // calls min() with empty symbol table
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      
      redBlackBST0.put("", ";SgLfW");
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      
      String string0 = redBlackBST0.min();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      
      redBlackBST0.put("F09|KR.+b^j#k", "F09|KR.+b^j#k");
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.size());
      
      int int0 = redBlackBST0.height();
      assertEquals(0, int0);
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals(0, redBlackBST0.size());
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      
      redBlackBST0.put("", ";SgLfW");
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      
      redBlackBST0.put("t,", "t,");
      assertEquals(2, redBlackBST0.size());
      assertEquals(1, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      assertEquals(3, redBlackBST0.size());
      assertEquals(1, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      
      redBlackBST0.put("4.c", "t)");
      assertEquals(4, redBlackBST0.size());
      assertEquals(2, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      
      redBlackBST0.delete("7{JY*kse");
      assertEquals(3, redBlackBST0.size());
      assertEquals(1, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      
      redBlackBST0.put("", ";SgLfW");
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.height());
      
      redBlackBST0.put("t,", "t,");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.height());
      assertEquals(2, redBlackBST0.size());
      
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.height());
      assertEquals(3, redBlackBST0.size());
      
      redBlackBST0.put("rd5:fmJk_d5l<", "t)");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(2, redBlackBST0.height());
      assertEquals(4, redBlackBST0.size());
      
      redBlackBST0.delete("");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.height());
      assertEquals(3, redBlackBST0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      
      redBlackBST0.put("", ";SgLfW");
      assertEquals(1, redBlackBST0.size());
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      
      redBlackBST0.put("t,", "t,");
      assertEquals(2, redBlackBST0.size());
      assertEquals(1, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      assertEquals(3, redBlackBST0.size());
      assertEquals(1, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      
      redBlackBST0.put("rd5:fmJk_d5l<", "t)");
      assertEquals(4, redBlackBST0.size());
      assertEquals(2, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      
      redBlackBST0.delete("7{JY*kse");
      assertEquals(3, redBlackBST0.size());
      assertEquals(1, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertTrue(redBlackBST0.isEmpty());
      assertEquals((-1), redBlackBST0.height());
      assertEquals(0, redBlackBST0.size());
      
      redBlackBST0.put("", ";SgLfW");
      assertEquals(0, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.size());
      
      redBlackBST0.put("t,", "t,");
      assertEquals(1, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(2, redBlackBST0.size());
      
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      assertEquals(1, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(3, redBlackBST0.size());
      
      redBlackBST0.delete("7{JY*kse");
      assertEquals(1, redBlackBST0.height());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(2, redBlackBST0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      assertNotNull(redBlackBST0);
      assertEquals(0, redBlackBST0.size());
      assertEquals((-1), redBlackBST0.height());
      assertTrue(redBlackBST0.isEmpty());
      
      redBlackBST0.put("W", ";SgLfW");
      assertEquals(1, redBlackBST0.size());
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(0, redBlackBST0.height());
      
      redBlackBST0.put("t,", "t,");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.height());
      assertEquals(2, redBlackBST0.size());
      
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.height());
      assertEquals(3, redBlackBST0.size());
      
      redBlackBST0.put("", "t)");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(2, redBlackBST0.height());
      assertEquals(4, redBlackBST0.size());
      
      redBlackBST0.delete("7{JY*kse");
      assertFalse(redBlackBST0.isEmpty());
      assertEquals(1, redBlackBST0.height());
      assertEquals(3, redBlackBST0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      redBlackBST0.put("", ";SgLfW");
      redBlackBST0.put("t,", "t,");
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      redBlackBST0.delete("");
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      redBlackBST0.delete("7{JY*kse");
      assertTrue(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      redBlackBST0.put("t,", "t)");
      redBlackBST0.delete("7{JY*kse");
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RedBlackBST<Integer, Integer> redBlackBST0 = new RedBlackBST<Integer, Integer>();
      // Undeclared exception!
      try { 
        redBlackBST0.delete((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument to delete() is null
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      redBlackBST0.put("", ";SgLfW");
      redBlackBST0.put("t,", "t,");
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      redBlackBST0.put("rd5:fmJk_d5l<", "t)");
      redBlackBST0.deleteMax();
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      redBlackBST0.put("", ";SgLfW");
      redBlackBST0.put("t,", "t,");
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      redBlackBST0.deleteMax();
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      redBlackBST0.put("", ";SgLfW");
      redBlackBST0.put("t,", "t,");
      redBlackBST0.deleteMax();
      assertEquals(1, redBlackBST0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      // Undeclared exception!
      try { 
        redBlackBST0.deleteMax();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // com.misc.BST underflow
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      redBlackBST0.put("F09|KR.+b^j#k", "F09|KR.+b^j#k");
      redBlackBST0.deleteMax();
      assertEquals((-1), redBlackBST0.height());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      redBlackBST0.put("t,", "t,");
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      redBlackBST0.put("rd5:fmJk_d5l<", "t)");
      redBlackBST0.deleteMin();
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      redBlackBST0.put("F09|KR.+b^j#k", "F09|KR.+b^j#k");
      redBlackBST0.put("argument to select() is invalid: ", "argument to select() is invalid: ");
      redBlackBST0.deleteMin();
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RedBlackBST<Integer, Object> redBlackBST0 = new RedBlackBST<Integer, Object>();
      // Undeclared exception!
      try { 
        redBlackBST0.deleteMin();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // com.misc.BST underflow
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      redBlackBST0.put("uy", "uy");
      redBlackBST0.deleteMin();
      assertTrue(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      redBlackBST0.put("<", "<");
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      redBlackBST0.put("rd5:fmJk_d5l<", "t)");
      redBlackBST0.max();
      assertEquals(1, redBlackBST0.height());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      redBlackBST0.put("", ";SgLfW");
      redBlackBST0.put("", "t)");
      assertFalse(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      redBlackBST0.put("", (String) null);
      assertTrue(redBlackBST0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RedBlackBST<String, Integer> redBlackBST0 = new RedBlackBST<String, Integer>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        redBlackBST0.put((String) null, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first argument to put() is null
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      redBlackBST0.put("<", "<");
      redBlackBST0.delete("7{JY*kse");
      assertEquals(0, redBlackBST0.height());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      Object object0 = redBlackBST0.get("rd5:fmJk_d5l<");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      // Undeclared exception!
      try { 
        redBlackBST0.get((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument to get() is null
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      // Undeclared exception!
      try { 
        redBlackBST0.max();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // calls max() with empty symbol table
         //
         verifyException("com.optum.fs.rest.service.util.RedBlackBST", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      int int0 = redBlackBST0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RedBlackBST<String, Object> redBlackBST0 = new RedBlackBST<String, Object>();
      int int0 = redBlackBST0.height();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RedBlackBST<String, String> redBlackBST0 = new RedBlackBST<String, String>();
      redBlackBST0.put("", "");
      redBlackBST0.put("7{JY*kse", "7{JY*kse");
      redBlackBST0.put("4.c", "t)");
      redBlackBST0.delete("7{JY*kse");
      assertFalse(redBlackBST0.isEmpty());
  }
}
